{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{{ attach_library('bootstrap_barrio/node') }}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}

{% set hero_image = content.field_hero_image %}


{% set untabbed = [] %}
{% set tabsArray = [] %}
{% set currentTab = '' %}
{% for key, item in content.field_paragraphs if key|first != '#' %}
    {% if item['#paragraph'].bundle() == 'tab' %}
        {% set currentTab = item['#paragraph'].field_title.value %}

        {% set tab = [] %}
        {%  set tabsArray = tabsArray|merge({(currentTab):[]}) %}
    {% elseif currentTab != '' %}
        {% set tab = tab|merge([item]) %}
        {% set tabsArray = tabsArray|merge({(currentTab):tab}) %}
    {% else %}
       {% set untabbed = untabbed|merge([item]) %}
    {% endif %}

{% endfor %}

{% if content.field_hero_image[0] %}
    {% set max_height = 450 %}
{% endif %}

<section {{ attributes.addClass(classes) }}>
    
    {% if content.field_hero_image[0] %}
          <div class="row full-width-row">
                <div class="hero" {% if max_height %}style="max-height: {{ max_height }}px;"{% endif %}>
                  {{ content.field_hero_image }}
                    {% if node.field_hero_title.value is not empty %}
                    <div class="hero-title-container">
                      <div class="hero-info-overlay">
                        <h1 class="hero-title">{{ node.field_hero_title.value|raw }}</h1>
                      </div>
                        </div>
                    {% endif %}
                </div>
        </div>
    {% elseif node.field_hero_title.value is not empty %}
          <div class="no-hero full-width-row" {% if max_height %}style="background: #00255c;"{% endif %}>
              <div class="hero-title-container">
                <div class="row">
                  <div class="col">
                    <h1 class="no-hero-title">{{ node.field_hero_title.value|raw }}</h1>
                  </div>
                </div>
              </div>
          </div>
    {% endif %}

    <div{{ content_attributes.addClass('node__content', 'clearfix', 'paragraph--type--tabs') }}>
      {% set tabsCount =  tabsArray|length %}
      {% if tabsCount %}
          {{ untabbed }}
        <nav id="nav-tabs-top">
          <div class="nav nav-tabs nav-fill" id="nav-tab" role="tablist">
              {% set counter = 0 %}
              {% set width = 100 / tabsCount %}
              {% for key, item in tabsArray %}
              <a class="nav-item nav-link{% if counter == 0 %} active{% endif %}" id="nav-tab-{{ counter }}" data-toggle="tab" href="#pane-{{ counter }}" role="tab" aria-controls="pane-{{ counter }}" aria-selected="{% if counter == 0 %}true{% else %}false{% endif %}" style="width: {{ width }}%;">{{ key }}</a>
                {% set counter = counter + 1 %}
            {% endfor %}
          </div>
        </nav>
        
        <div class="tab-content" id="nav-tabContent">
          {% set counter = 0 %}
          {% for key, item in tabsArray %}

            <div class="tab-pane fade{% if counter == 0 %} show active{% endif %}" id="pane-{{ counter }}"
                 role="tabpanel" aria-labelledby="nav-tab-{{ counter }}">
              {{ item }}
            </div>
            {% set counter = counter + 1 %}
          {% endfor %}
        </div>

          <nav class="nav-tabs-bottom ">
              <div class="nav nav-tabs nav-fill" id="nav-tab" role="tablist">
                  {% set counter = 0 %}
                  {% for key, item in tabsArray %}
                      <a class="nav-item nav-link{% if counter == 0 %} active{% endif %}" id="nav-tab-bottom-{{ counter }}" data-toggle="tab" href="#pane-{{ counter }}" role="tab" aria-controls="pane-{{ counter }}" aria-selected="{% if counter == 0 %}true{% else %}false{% endif %}"><span>{{ key }}</span></a>
                      {% set counter = counter + 1 %}
                  {% endfor %}
              </div>
          </nav>

        {% else %}
          {{ content.field_paragraphs }}
        {% endif %}
    </div>
</section>
