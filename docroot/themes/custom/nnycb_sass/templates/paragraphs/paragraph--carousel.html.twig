{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% 
	set classes = [
		'paragraph',
		'paragraph--type--' ~ paragraph.bundle|clean_class,
		view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
		not paragraph.isPublished() ? 'paragraph--unpublished',
		'container-fluid'
	]
%}

{% set fluid_container = paragraph.field_para_fluid_container.value %}
{% set carousel_speed  = paragraph.field_para_carousel_speed.value %}
{% set carousel_items  = content.field_carousel_items %}

{# Specify that we want to hide the content so we can print our fields individually #}

<section {{ attributes.addClass(classes) }}>
    {% block content %}
         <div class="row {{ fluid_container == "1" ? "full-width-row" }}">
           	<div class="element element--layout-carousel carousel slide" id="myCarousel-{{ paragraph.id.value }}" data-ride="carousel" {% if carousel_speed %} data-interval="{{ carousel_speed }}" {% endif %}>


				{% set itemcount = 0 %}
				<!-- Wrapper for slides -->
                <div class="carousel-inner" role="listbox">
                    {% for key, item in carousel_items if key|first != '#' %}
						{% set itemcount = itemcount + 1 %}
                        <div class="element--layout-carousel__slide-{{ key + 1 }} carousel-item {% if loop.first %}active{% endif %}">{{ item }}</div>
                    {% endfor %}
                </div>

				{% if itemcount > 1 %}
				<!-- Indicators -->
				<ol class="carousel-indicators">
					{% for key, item in carousel_items if key|first != '#' %}
						<li class="{% if loop.first %} active {% endif %}" data-slide-to="{{ key }}" data-target="#myCarousel-{{ paragraph.id.value }}"></li>
					{% endfor %}
				</ol>
				{% endif %}
				  
			  	<!-- Controls -->
			  	{# <a class="left carousel-control carousel-control--left" href="#myCarousel-{{ paragraph.id.value }}" role="button" data-slide="prev">
                    <i class="icon-right_arrow2 rotate-arrow"></i>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control carousel-control--right" href="#myCarousel-{{ paragraph.id.value }}" role="button" data-slide="next">
                    <i class="icon-right_arrow2"></i>
                    <span class="sr-only">Next</span>
                </a> #}
			</div>
        </div>
    {% endblock %}
</section>

