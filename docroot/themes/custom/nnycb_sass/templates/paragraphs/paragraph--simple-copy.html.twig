{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% 
	set classes = [
		'paragraph',
		'paragraph--type--' ~ paragraph.bundle|clean_class,
		view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
		not paragraph.isPublished() ? 'paragraph--unpublished',
		'container-fluid' 
	]
%}

{% set simple_title = paragraph.field_title.value %}
{% if not simple_title %}
	{% set simple_title = '' %}
{% endif %}
{% set simple_highlight_text = paragraph.field_highlight_text.value %}	
{% set simple_title_size = paragraph.field_header_text_size.value %}
{% set simple_color = paragraph.field_container_color.value %}
{% set wide_style = paragraph.field_wide_style.value %}
{% set simple_image = content.field_card_image %}
{% set simple_copy = paragraph.field_copy.value %}
{% if not simple_copy %}
	{% set simple_copy = ''  %}
{% endif %}


<div class="para-wrapper" {% if simple_color %} style="background-color: {{ simple_color }};"{% endif %}>
<section {{ attributes.addClass(classes) }}> 
	{% block paragraph %}
	    {% block content %}
            <div class="row simple-copy inset-pad">
            		{% if simple_image %}
						<div class="col-sm-12 full-width-img">{{ simple_image }}</div>
					{% endif %}
					{% if simple_copy %}
						<div class="col-sm-12 simple-copy--copy{% if wide_style == "1" %} wider{% endif %}">
							{% if simple_highlight_text %}
								<h3 class="section-title{% if simple_color == "#002D72" %} section-title--white{% endif %}{% if simple_color == "#F4F4F4" %} section-title--blue{% endif %}{% if simple_color == "transparent" %} section-title--blue{% endif %}">{{ simple_highlight_text }}</h3>
							{% endif %}
							
							<h2 class="title{% if simple_title_size == "1" %} large-heading{% endif %}{% if simple_title_size == "0" %} small-heading{% endif %}"{% if simple_color == "#002D72" %} style="color: #fff;"{% endif %}{% if simple_color == "#F4F4F4" %}style="color: #002D72;"{% endif %}{% if simple_color == "transparent" %}style="color: #002D72;"{% endif %}>{{ simple_title|t }}</h2>
							
							{% if simple_color == "#002D72" %}
								<span style="color:#fff;">{{ content.field_copy }}</span>
							{% else %}
								<span style="color:#000;">{{ content.field_copy }}</span>
							{% endif %}
		    			</div>
	    			{% endif %}
				</div>
        {% endblock %}
	{% endblock paragraph %}
</section>
</div>