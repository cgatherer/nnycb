{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% 
	set classes = [
		'paragraph',
		'paragraph--type--' ~ paragraph.bundle|clean_class,
		view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
		not paragraph.isPublished() ? 'paragraph--unpublished',
		'container-fluid' 
	]
%}

{% set stat_card_title = paragraph.field_title.value %}
{% set stat_card_subtitle = paragraph.field_subtitle.value %}
{% set stat_card_color = paragraph.field_container_color.value %}
{% set stat_card_image = content.field_stat_card_image %}

<section {{ attributes.addClass(classes) }}>
	{% block paragraph %} 
	    {% block content %}
			<div class="row stat-card inset-pad" {% if stat_card_color %}style="background-color: {{ stat_card_color }};"{% endif %}>
	    		<div class="col-sm-12 col-md-6 stat-card--copy">
					<h2 class="title"{% if stat_card_color == "#002D72" %}style="color: #fff;"{% endif %}{% if stat_card_color == "#F4F4F4" %}style="color: #002D72;"{% endif %}{% if stat_card_color == "transparent" %}style="color: #002D72;"{% endif %}>{{ stat_card_title }}</h2>

					<div class="subtile">{{ stat_card_subtitle }}</div>
						
					{% if stat_card_color == "#002D72" %}
						<span style="color:#fff;">{{ content.field_copy }}</span>
					{% else %}
						<span style="color:#002D72;">{{ content.field_copy }}</span>
					{% endif %}
					}
	    		</div>
	    		<div class="col-sm-12 col-md-6 stat-card--img">
	    			{{ stat_card_image }}
	    		</div>
			</div>  
	    {% endblock %}
	{% endblock paragraph %}
</section>
